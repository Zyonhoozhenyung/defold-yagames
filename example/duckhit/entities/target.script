
go.property("_anim_value", 0)
go.property("texture_name_on", hash("target_on"))
go.property("texture_name_off", hash("target_off"))

function init(self)
	self.default_pos = go.get_position()

	go.set_scale(vmath.vector3(0.000001))
	go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(1), go.EASING_OUTCUBIC, 0.35, 0.1)

	self.radius = 0
	self.angle = 0

	self.hit = false
end

function final(self)
end

function update(self, dt)
	if self.stop then
		return
	end
	
	local angle = self.angle
	angle = angle + self._anim_value * (math.pi * 2)
	go.set_position(vmath.vector3(math.cos(angle) * self.radius, math.sin(angle) * self.radius, 0))
end

local function update_texture(self)
	if self.hit then
		msg.post("#sprite", "play_animation", { id = self.texture_name_off })
	else
		msg.post("#sprite", "play_animation", { id = self.texture_name_on })
	end
end

local function toggle_texture(self)
	update_texture(self)
	if self.hit then
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_FORWARD, -1, go.EASING_LINEAR, 0.07)
	else
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.07)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("move") then
		self.angle = message.angle
		self.radius = message.radius
		self.level_receiver = sender

		if message.mode == 0 then
			go.animate("#target", "_anim_value", go.PLAYBACK_LOOP_FORWARD, -3, go.EASING_LINEAR, 15)
		elseif message.mode == 1 then
			go.animate("#target", "_anim_value", go.PLAYBACK_LOOP_FORWARD, -3, go.EASING_INOUTQUAD, 9)
		end

	elseif message_id == hash("hit") then
		self.hit = not self.hit

		go.cancel_animations(".", "scale.x")
		go.animate(".", "scale.x", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.07, 0, toggle_texture)

		msg.post(self.level_receiver, "target_hit", { hit = self.hit })

	elseif message_id == hash("stop_and_explode") then
		self.stop = true

		update_texture(self)

		msg.post("#collisionobject", "disable")

		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_OUTQUAD, 0.4)

		local angle = self.angle
		go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(math.cos(angle) * (self.radius + 200), math.sin(angle) * (self.radius + 200), 0), go.EASING_OUTQUAD, 0.4)
	end
end

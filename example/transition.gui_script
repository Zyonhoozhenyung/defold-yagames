local app_consts = require("example.app.consts")

local ALPHA_MIN = 0
local ALPHA_MAX = 1

local function set_alpha(node, alpha)
    local color = gui.get_color(node)
    color.w = alpha
    gui.set_color(node, color)
end

function init(self)
    gui.set_render_order(app_consts.gui_order.TRANSITION)

    self.cover_node = gui.get_node("cover")
    set_alpha(self.cover_node, ALPHA_MAX)

    self.state = hash("fade_in")
    self.reply_to = nil
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("fade_in") then
        assert(self.reply_to == nil)
        self.reply_to = sender
        gui.set_enabled(self.cover_node, true)
        if self.state == message_id then
            gui.cancel_animation(self.cover_node, "color.w")
            on_fade_in_complete(self, nil, nil)
        else
            self.state = message_id

            gui.animate(self.cover_node, "color.w", ALPHA_MAX, gui.EASING_OUTQUAD, 0.25, 0,
                        on_fade_in_complete, gui.PLAYBACK_ONCE_FORWARD)
        end
    elseif message_id == hash("fade_out") then
        assert(self.reply_to == nil)
        self.reply_to = sender
        if self.state == message_id then
            gui.cancel_animation(self.cover_node, "color.w")
            on_fade_out_complete(self, nil, nil)
        else
            self.state = message_id

            local pause = 0.1
            gui.set_enabled(self.cover_node, true)
            gui.animate(self.cover_node, "color.w", ALPHA_MIN, gui.EASING_OUTQUAD, 0.35, pause,
                        on_fade_out_complete, gui.PLAYBACK_ONCE_FORWARD)
        end
    end
end

function on_fade_in_complete(self, url, property)
    msg.post(self.reply_to, "transition_fade_in_complete")
    self.reply_to = nil

    set_alpha(self.cover_node, ALPHA_MAX)
end

function on_fade_out_complete(self, url, property)
    msg.post(self.reply_to, "transition_fade_out_complete")
    self.reply_to = nil

    set_alpha(self.cover_node, ALPHA_MIN)
    gui.set_enabled(self.cover_node, false)
end
